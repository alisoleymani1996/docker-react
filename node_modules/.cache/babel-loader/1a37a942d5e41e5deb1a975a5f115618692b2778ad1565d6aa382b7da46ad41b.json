{"ast":null,"code":"import { createStore } from 'redux';\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    isAuthenticated: false\n  },\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    counter: 0,\n    show: true\n  },\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    toggleCounter(state) {\n      state.show = !state.show;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const authActions = authSlice.actions;\nexport const counterActions = counterSlice.actions;\n\n// const counterReducerFn = (state = {counter: 0, show: true}, action) => {\n//\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             show: state.show,\n//         }\n//     }\n//\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             show: state.show,\n//         }\n//     }\n//     if (action.type === 'toggleCounter') {\n//         return {\n//             counter: state.counter,\n//             show: !state.show,\n//         }\n//     }\n//     return state\n// }\n//\n// const store = createStore(counterReducerFn)\nexport default store;\n\n// import {configureStore, createSlice} from '@reduxjs/toolkit';\n//\n//\n// const authSlice = createSlice({\n//     name: 'auth',\n//     initialState: {isAuthenticated: false},\n//     reducers: {\n//         login(state) {\n//             state.isAuthenticated = true\n//         },\n//         logout(state) {\n//             state.isAuthenticated = false\n//         },\n//     }\n// })\n//\n//\n// const counterSlice = createSlice({\n//     name: 'counter',\n//     initialState: {counter: 0, showCounter: false},\n//     reducers: {\n//         increment(state) {\n//             state.counter++;\n//         },\n//         decrement(state) {\n//             state.counter--;\n//         },\n//         increase(state, action) {\n//             state.counter = state.counter + action.payload\n//         },\n//         toggle(state) {\n//             state.showCounter = !state.showCounter\n//         }\n//     }\n// })\n//\n// const store = configureStore({\n//     reducer: {\n//         counter: counterSlice.reducer,\n//         auth: authSlice.reducer,\n//     }\n// })\n//\n// export const authActions = authSlice.actions;\n// export const counterActions = counterSlice.actions;\n// export default store;\n\n//\n// const initialCounterState = {counter: 0, showCounter: false}\n//\n// const counterReducer = (state = initialCounterState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter,\n//         }\n//     }\n//\n//     return state;\n// }\n//\n// const store = createStore(counterReducer)\n//\n// export default store;","map":{"version":3,"names":["createStore","configureStore","createSlice","authSlice","name","initialState","isAuthenticated","reducers","login","state","logout","counterSlice","counter","show","increment","decrement","toggleCounter","increase","action","payload","store","reducer","auth","authActions","actions","counterActions"],"sources":["/app/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\r\nimport {configureStore, createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth', initialState: {isAuthenticated: false},\r\n    reducers: {\r\n        login(state){\r\n            state.isAuthenticated = true\r\n        },\r\n        logout(state){\r\n            state.isAuthenticated = false\r\n        },\r\n    }\r\n})\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter', initialState: {counter: 0, show: true},\r\n    reducers: {\r\n        increment(state) {\r\n            state.counter++\r\n        },\r\n        decrement(state) {\r\n            state.counter--\r\n        },\r\n        toggleCounter(state){\r\n            state.show = !state.show\r\n        },\r\n        increase(state, action) {\r\n            state.counter = state.counter + action.payload;\r\n        }\r\n    },\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        counter: counterSlice.reducer,\r\n        auth: authSlice.reducer,\r\n    }\r\n})\r\n\r\nexport const authActions = authSlice.actions;\r\nexport const counterActions = counterSlice.actions;\r\n\r\n// const counterReducerFn = (state = {counter: 0, show: true}, action) => {\r\n//\r\n//     if (action.type === 'increment') {\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             show: state.show,\r\n//         }\r\n//     }\r\n//\r\n//     if (action.type === 'decrement') {\r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             show: state.show,\r\n//         }\r\n//     }\r\n//     if (action.type === 'toggleCounter') {\r\n//         return {\r\n//             counter: state.counter,\r\n//             show: !state.show,\r\n//         }\r\n//     }\r\n//     return state\r\n// }\r\n//\r\n// const store = createStore(counterReducerFn)\r\nexport default store;\r\n\r\n\r\n// import {configureStore, createSlice} from '@reduxjs/toolkit';\r\n//\r\n//\r\n// const authSlice = createSlice({\r\n//     name: 'auth',\r\n//     initialState: {isAuthenticated: false},\r\n//     reducers: {\r\n//         login(state) {\r\n//             state.isAuthenticated = true\r\n//         },\r\n//         logout(state) {\r\n//             state.isAuthenticated = false\r\n//         },\r\n//     }\r\n// })\r\n//\r\n//\r\n// const counterSlice = createSlice({\r\n//     name: 'counter',\r\n//     initialState: {counter: 0, showCounter: false},\r\n//     reducers: {\r\n//         increment(state) {\r\n//             state.counter++;\r\n//         },\r\n//         decrement(state) {\r\n//             state.counter--;\r\n//         },\r\n//         increase(state, action) {\r\n//             state.counter = state.counter + action.payload\r\n//         },\r\n//         toggle(state) {\r\n//             state.showCounter = !state.showCounter\r\n//         }\r\n//     }\r\n// })\r\n//\r\n// const store = configureStore({\r\n//     reducer: {\r\n//         counter: counterSlice.reducer,\r\n//         auth: authSlice.reducer,\r\n//     }\r\n// })\r\n//\r\n// export const authActions = authSlice.actions;\r\n// export const counterActions = counterSlice.actions;\r\n// export default store;\r\n\r\n\r\n//\r\n// const initialCounterState = {counter: 0, showCounter: false}\r\n//\r\n// const counterReducer = (state = initialCounterState, action) => {\r\n//     if (action.type === 'increment') {\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n//\r\n//     if (action.type === 'decrement') {\r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n//     if (action.type === 'increase') {\r\n//         return {\r\n//             counter: state.counter + action.amount,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n//     if (action.type === 'toggle') {\r\n//         return {\r\n//             counter: state.counter,\r\n//             showCounter: !state.showCounter,\r\n//         }\r\n//     }\r\n//\r\n//     return state;\r\n// }\r\n//\r\n// const store = createStore(counterReducer)\r\n//\r\n// export default store;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAAQC,cAAc,EAAEC,WAAW,QAAO,kBAAkB;AAE5D,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAE,MAAM;EAAEC,YAAY,EAAE;IAACC,eAAe,EAAE;EAAK,CAAC;EACpDC,QAAQ,EAAE;IACNC,KAAKA,CAACC,KAAK,EAAC;MACRA,KAAK,CAACH,eAAe,GAAG,IAAI;IAChC,CAAC;IACDI,MAAMA,CAACD,KAAK,EAAC;MACTA,KAAK,CAACH,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMK,YAAY,GAAGT,WAAW,CAAC;EAC7BE,IAAI,EAAE,SAAS;EAAEC,YAAY,EAAE;IAACO,OAAO,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAI,CAAC;EACvDN,QAAQ,EAAE;IACNO,SAASA,CAACL,KAAK,EAAE;MACbA,KAAK,CAACG,OAAO,EAAE;IACnB,CAAC;IACDG,SAASA,CAACN,KAAK,EAAE;MACbA,KAAK,CAACG,OAAO,EAAE;IACnB,CAAC;IACDI,aAAaA,CAACP,KAAK,EAAC;MAChBA,KAAK,CAACI,IAAI,GAAG,CAACJ,KAAK,CAACI,IAAI;IAC5B,CAAC;IACDI,QAAQA,CAACR,KAAK,EAAES,MAAM,EAAE;MACpBT,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACG,OAAO,GAAGM,MAAM,CAACC,OAAO;IAClD;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMC,KAAK,GAAGnB,cAAc,CAAC;EACzBoB,OAAO,EAAE;IACLT,OAAO,EAAED,YAAY,CAACU,OAAO;IAC7BC,IAAI,EAAEnB,SAAS,CAACkB;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAME,WAAW,GAAGpB,SAAS,CAACqB,OAAO;AAC5C,OAAO,MAAMC,cAAc,GAAGd,YAAY,CAACa,OAAO;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeJ,KAAK;;AAGpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}