{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Tasks from './componentsCostumHooksHttp/Tasks/Tasks';\nimport NewTask from './componentsCostumHooksHttp/NewTask/NewTask';\nimport Counter from \"./components3/Counter\";\nimport Auth from \"./components3/Auth\";\nimport Header from \"./components3/Header\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// function App() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [tasks, setTasks] = useState([]);\n//\n//   const fetchTasks = async (taskText) => {\n//     setIsLoading(true);\n//     setError(null);\n//     try {\n//       const response = await fetch(\n//         'https://react-http-6b4a6.firebaseio.com/tasks.json'\n//       );\n//\n//       if (!response.ok) {\n//         throw new Error('Request failed!');\n//       }\n//\n//       const data = await response.json();\n//\n//       const loadedTasks = [];\n//\n//       for (const taskKey in data) {\n//         loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n//       }\n//\n//       setTasks(loadedTasks);\n//     } catch (err) {\n//       setError(err.message || 'Something went wrong!');\n//     }\n//     setIsLoading(false);\n//   };\n//\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n//\n//   const taskAddHandler = (task) => {\n//     setTasks((prevTasks) => prevTasks.concat(task));\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <NewTask onAddTask={taskAddHandler} />\n//       <Tasks\n//         items={tasks}\n//         loading={isLoading}\n//         error={error}\n//         onFetch={fetchTasks}\n//       />\n//     </React.Fragment>\n//   );\n// }\n//\n// export default App;\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   useEffect(() => {\n//     const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n//\n//     if (storedUserLoggedInInformation === '1') {\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n//\n//   const loginHandler = (email, password) => {\n//     // We should of course check email and password\n//     // But it's just a dummy/ demo anyways\n//     localStorage.setItem('isLoggedIn', '1');\n//     setIsLoggedIn(true);\n//   };\n//\n//   const logoutHandler = () => {\n//     localStorage.removeItem('isLoggedIn');\n//     setIsLoggedIn(false);\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n//       <main>\n//         {!isLoggedIn && <Login onLogin={loginHandler} />}\n//         {isLoggedIn && <Home onLogout={logoutHandler} />}\n//       </main>\n//     </React.Fragment>\n//   );\n// }\n//\n// export default App;\n\n// const App = () => {\n//     return (\n//         <Layout>\n//             <Switch>\n//                 <Route path={'/'} exact={true}>\n//                     <Redirect to={'/quotes'}/>\n//                 </Route>\n//                 <Route path={'/quotes'} exact>\n//                     <AllQuotes/>\n//                 </Route>\n//                 <Route path={'/quotes/:quoteId'}>\n//                     <QuoteDetail/>\n//                 </Route>\n//                 <Route path={'/new-quote'}>\n//                     <NewQuote/>\n//                 </Route>\n//                 <Route path={'*'}>\n//                     <NotFound/>\n//                 </Route>\n//             </Switch>\n//         </Layout>\n//     )\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const authStatus = useSelector(state => state.auth.isAuthenticated);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), !authStatus && /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"fmywn0uENEoKef1NnGe+N2enBGQ=\", false, function () {\n  return [useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useEffect","useState","Tasks","NewTask","Counter","Auth","Header","useDispatch","useSelector","jsxDEV","_jsxDEV","App","_s","authStatus","state","auth","isAuthenticated","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["import React, {Fragment, useEffect, useState} from 'react';\n\nimport Tasks from './componentsCostumHooksHttp/Tasks/Tasks'\nimport NewTask from './componentsCostumHooksHttp/NewTask/NewTask';\nimport Counter from \"./components3/Counter\";\nimport Auth from \"./components3/Auth\";\nimport Header from \"./components3/Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\n// function App() {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [tasks, setTasks] = useState([]);\n//\n//   const fetchTasks = async (taskText) => {\n//     setIsLoading(true);\n//     setError(null);\n//     try {\n//       const response = await fetch(\n//         'https://react-http-6b4a6.firebaseio.com/tasks.json'\n//       );\n//\n//       if (!response.ok) {\n//         throw new Error('Request failed!');\n//       }\n//\n//       const data = await response.json();\n//\n//       const loadedTasks = [];\n//\n//       for (const taskKey in data) {\n//         loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n//       }\n//\n//       setTasks(loadedTasks);\n//     } catch (err) {\n//       setError(err.message || 'Something went wrong!');\n//     }\n//     setIsLoading(false);\n//   };\n//\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n//\n//   const taskAddHandler = (task) => {\n//     setTasks((prevTasks) => prevTasks.concat(task));\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <NewTask onAddTask={taskAddHandler} />\n//       <Tasks\n//         items={tasks}\n//         loading={isLoading}\n//         error={error}\n//         onFetch={fetchTasks}\n//       />\n//     </React.Fragment>\n//   );\n// }\n//\n// export default App;\n\n\n\n\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//\n//   useEffect(() => {\n//     const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n//\n//     if (storedUserLoggedInInformation === '1') {\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n//\n//   const loginHandler = (email, password) => {\n//     // We should of course check email and password\n//     // But it's just a dummy/ demo anyways\n//     localStorage.setItem('isLoggedIn', '1');\n//     setIsLoggedIn(true);\n//   };\n//\n//   const logoutHandler = () => {\n//     localStorage.removeItem('isLoggedIn');\n//     setIsLoggedIn(false);\n//   };\n//\n//   return (\n//     <React.Fragment>\n//       <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n//       <main>\n//         {!isLoggedIn && <Login onLogin={loginHandler} />}\n//         {isLoggedIn && <Home onLogout={logoutHandler} />}\n//       </main>\n//     </React.Fragment>\n//   );\n// }\n//\n// export default App;\n\n\n// const App = () => {\n//     return (\n//         <Layout>\n//             <Switch>\n//                 <Route path={'/'} exact={true}>\n//                     <Redirect to={'/quotes'}/>\n//                 </Route>\n//                 <Route path={'/quotes'} exact>\n//                     <AllQuotes/>\n//                 </Route>\n//                 <Route path={'/quotes/:quoteId'}>\n//                     <QuoteDetail/>\n//                 </Route>\n//                 <Route path={'/new-quote'}>\n//                     <NewQuote/>\n//                 </Route>\n//                 <Route path={'*'}>\n//                     <NotFound/>\n//                 </Route>\n//             </Switch>\n//         </Layout>\n//     )\n// }\n\nconst App = () => {\n    const authStatus = useSelector(state=> state.auth.isAuthenticated)\n\n\n    return(\n        <Fragment>\n            <Header/>\n            {!authStatus && <Auth/>}\n            <Counter/>\n        </Fragment>\n    )\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAE1D,OAAOC,KAAK,MAAM,yCAAyC;AAC3D,OAAOC,OAAO,MAAM,6CAA6C;AACjE,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAAQC,WAAW,EAAEC,WAAW,QAAO,aAAa;;AAEpd,MAAMC,UAAU,GAAGL,WAAW,CAACM,KAAK,IAAGA,KAAK,CAACC,IAAI,CAACC,eAAe,CAAC;EAGlE,oBACIN,OAAA,CAACX,QAAQ;IAAAkB,QAAA,gBACLP,OAAA,CAACJ,MAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EACR,CAACR,UAAU,iBAAIH,OAAA,CAACL,IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACvBX,OAAA,CAACN,OAAO;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEnB,CAAC;AAAAT,EAAA,CAXKD,GAAG;EAAA,QACcH,WAAW;AAAA;AAAAc,EAAA,GAD5BX,GAAG;AAaT,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}